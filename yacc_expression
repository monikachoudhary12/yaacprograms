%{
#include <stdio.h>
#include <stdlib.h>

int yylex();
void yyerror(const char *s);
%}

%union {
    int num;
}

%token <num> NUMBER
%left '+' '-'
%left '*' '/'
%right '^'
%nonassoc UMINUS

%type <num> expr

%%

input:
    input expr '\n'  { printf("Result: %d\n", $2); }
    |
    ;

expr:
    expr '+' expr   { $$ = $1 + $3; }
  | expr '-' expr   { $$ = $1 - $3; }
  | expr '*' expr   { $$ = $1 * $3; }
  | expr '/' expr   { 
                        if ($3 == 0) {
                            yyerror("Division by zero");
                            $$ = 0;
                        } else {
                            $$ = $1 / $3;
                        }
                    }
  | expr '^' expr   { 
                        int res = 1;
                        for (int i = 0; i < $3; i++) res *= $1;
                        $$ = res;
                    }
  | '-' expr %prec UMINUS { $$ = -$2; }
  | '(' expr ')'    { $$ = $2; }
  | NUMBER          { $$ = $1; }
  ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter an arithmetic expression (Ctrl+D to exit):\n");
    yyparse();
    return 0;
}
